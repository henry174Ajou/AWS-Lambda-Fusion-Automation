functionInfo:
  - handlerFileName: index.js
    handlerFunctionName: handler
    functionId: allPositive
    handlerRootFolder: allPositive
    executionTime: 2
  - handlerFileName: index.js
    handlerFunctionName: handler
    functionId: square
    handlerRootFolder: square
    executionTime: 2
  - handlerFileName: index.js
    handlerFunctionName: handler
    functionId: twice
    handlerRootFolder: twice
    executionTime: 2
  - handlerFileName: index.js
    handlerFunctionName: handler
    functionId: absolute
    handlerRootFolder: absolute
    executionTime: 2
  - handlerFileName: index.js
    handlerFunctionName: handler
    functionId: sum
    handlerRootFolder: numberListSum
    executionTime: 2
  - handlerFileName: index.js
    handlerFunctionName: handler
    functionId: pass50ms
    handlerRootFolder: fiftyMilliPass
    executionTime: 50
  - handlerFileName: index.js
    handlerFunctionName: handler
    functionId: pass500ms
    handlerRootFolder: pass500ms
    executionTime: 500

chain:
  - type: function
    functionId: allPositive
    mergeInputAndOutput: true
  - type: converter
    rules:
      - from: in.numberList
        to: numberList
      - from: out.result
        to: isAllPositive
  - type: branch
    blocks:
      - condition: "$isAllPositive$ === true"
        probability: 0.5
        chains:
          - type: map
            iterationTarget: numberList
            numberOfRequest: 8
            maximumConcurrency: 8
            chain:
              - type: converter
                rules:
                  - from: ""
                    to: number
              - type: function
                functionId: square
      - condition: null
        probability: 0.5
        chains:
          - type: map
            iterationTarget: numberList
            numberOfRequest: 8
            maximumConcurrency: 8
            chain:
              - type: converter
                rules:
                  - from: ""
                    to: number
              - type: function
                functionId: absolute
              - type: function
                functionId: twice
  - type: converter
    rules:
      - from: "[].number"
        to: numberList
  - type: function
    functionId: sum
    mergeInputAndOutput: true
  - type: converter
    rules:
      - from: in.numberList
        to: numberList
      - from: out.sum
        to: sum
  - type: branch
    blocks:
      - condition: "$sum$ > 100"
        probability: 0.5
        chains:
          - type: map
            iterationTarget: numberList
            maximumConcurrency: 8
            numberOfRequest: 8
            chain:
              - type: function
                functionId: pass50ms
      - condition: null
        probability: 0.5
        chains:
          - type: map
            iterationTarget: numberList
            maximumConcurrency: 8
            numberOfRequest: 8
            chain:
              - type: function
                functionId: pass500ms